name: Combined Build and Release

on:
  push:
    tags:
      - '*'

jobs:
  setup:
    name: Setup Go and Node.js
    runs-on: ubuntu-latest

    outputs:
      go-version: '1.23'
      node-version: '22.7'

  build-go:
    name: Build and Release Go Binary with GoReleaser
    runs-on: ubuntu-latest
    needs: setup  # This job depends on the setup job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.setup.outputs.go-version }}

      - name: Set up Node.js for Electron app
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.setup.outputs.node-version }}
          
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest

      - name: Build and release Go binary
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goreleaser release --rm-dist

  build-electron:
    name: Build and Release Electron App
    runs-on: macos-latest
    needs: setup  # This job depends on the setup job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.setup.outputs.go-version }}

      - name: Set up Node.js for Electron app
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.setup.outputs.node-version }}

      - name: Install dependencies
        run: make init

      - name: Build Frontend and Backend
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
        run: make build

      - name: Package Electron app
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
        run: make electron-package

      - name: Extract tag name
        id: extract_tag
        run: |
          TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
          
          # Remove 'v' prefix from tag name if it exists
          VERSION=$(echo "$TAG_NAME" | sed 's/^v//')

          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Upload Electron app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: zasper-${{ env.version }}-arm64.dmg
          path: ui/dist/zasper-${{ env.version }}-arm64.dmg

  release:
    name: Create GitHub Release for Electron App
    runs-on: ubuntu-latest
    needs: [build-go, build-electron] 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract tag name and version
        run: |
          TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
          VERSION=$(echo "$TAG_NAME" | sed 's/^v//')
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Create new release (if not exists)
        run: |
          release_response=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                                   -X POST \
                                   -d "{\"tag_name\":\"${{ env.tag_name }}\", \"name\":\"Release ${{ env.tag_name }}\"}" \
                                   "https://api.github.com/repos/${{ github.repository }}/releases")
          echo "Release created: $release_response"


      - name: Upload Electron app to release
        run: |
          ARTIFACT_PATH="ui/dist/zasper-${{ env.version }}-arm64.dmg"
          upload_url=$(echo "$release_response" | jq -r .upload_url | sed 's/{?name,label}//')
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/zip" \
               --data-binary "@$ARTIFACT_PATH" \
               "$upload_url?name=zasper-${{ env.version }}-arm64.dmg"

